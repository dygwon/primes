from django.db import models


class CompanyProfile(models.Model):
    symbol = models.CharField(max_length=5)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    beta = models.DecimalField(max_digits=5, decimal_places=3)
    vol_avg = models.PositiveIntegerField()
    mkt_cap = models.PositiveBigIntegerField()
    last_div = models.DecimalField(max_digits=5, decimal_places=2)
    range = models.CharField(max_length=64)
    changes = models.DecimalField(max_digits=10, decimal_places=2)
    company_name = models.CharField(max_length=128)
    currency = models.CharField(max_length=3)
    cik = models.CharField(max_length=10)
    isin = models.CharField(max_length=12)
    cusip = models.CharField(max_length=9)
    exchange = models.CharField(max_length=64)
    exchange_short_name = models.CharField(max_length=16)
    industry = models.CharField(max_length=128)
    website = models.URLField()
    description = models.TextField()
    ceo = models.CharField(max_length=128)
    sector = models.CharField(max_length=128)
    country = models.CharField(max_length=3)
    full_time_employees = models.CharField(max_length=8)
    phone = models.CharField(max_length=15)
    address = models.CharField(max_length=128)
    city = models.CharField(max_length=128)
    state = models.CharField(max_length=8)
    zip = models.CharField(max_length=16)
    dcf_diff = models.DecimalField(max_digits=15, decimal_places=5)
    dcf = models.DecimalField(max_digits=24, decimal_places=14)
    image = models.URLField()
    ipo_date = models.DateField()
    default_image = models.BooleanField()
    is_etf = models.BooleanField()
    is_actively_trading = models.BooleanField()
    is_adr = models.BooleanField()
    is_fund = models.BooleanField()
    created = models.DateField(auto_now_add=True)

    def __str__(self):
        return f'CompanyProfile({self.symbol})'
    

class IncomeStatement(models.Model):
    date = models.DateField()
    symbol = models.CharField(max_length=5)
    reported_currency = models.CharField(max_length=3)
    cik = models.CharField(max_length=10)
    filling_date = models.DateField()
    accepted_date = models.DateTimeField()
    calendar_year = models.CharField(max_length=4)
    period = models.CharField(max_length=2)
    revenue = models.BigIntegerField()
    cost_of_revenue = models.BigIntegerField()
    gross_profit = models.BigIntegerField()
    gross_profit_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    research_and_development_expenses = models.BigIntegerField()
    general_and_administrative_expenses = models.BigIntegerField()
    selling_and_marketing_expenses = models.BigIntegerField()
    selling_general_and_administrative_expenses = models.BigIntegerField()
    other_expenses = models.BigIntegerField()
    operating_expenses = models.BigIntegerField()
    cost_and_expenses = models.BigIntegerField()
    interest_income = models.BigIntegerField()
    interest_expense = models.BigIntegerField()
    depreciation_and_amortization = models.BigIntegerField()
    ebitda = models.BigIntegerField()
    ebitda_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    operating_income = models.BigIntegerField()
    operating_income_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    total_other_income_expenses_net = models.BigIntegerField()
    income_before_tax = models.BigIntegerField()
    income_before_tax_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    income_tax_expense = models.BigIntegerField()
    net_income = models.BigIntegerField()
    net_income_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    eps = models.DecimalField(max_digits=5, decimal_places=2)
    eps_diluted = models.DecimalField(max_digits=5, decimal_places=2)
    weighted_average_shs_out = models.BigIntegerField()
    weighted_average_shs_out_dil = models.BigIntegerField()
    link = models.URLField()
    final_link = models.URLField()

    def __str__(self):
        return f'IncomeStatement({self.symbol}, {self.period}, {self.calendar_year})'
