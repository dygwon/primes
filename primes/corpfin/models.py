from django.db import models


class CompanyProfile(models.Model):
    symbol = models.CharField(max_length=5)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    beta = models.DecimalField(max_digits=5, decimal_places=3)
    vol_avg = models.PositiveIntegerField()
    mkt_cap = models.PositiveBigIntegerField()
    last_div = models.DecimalField(max_digits=5, decimal_places=2)
    range = models.CharField(max_length=64)
    changes = models.DecimalField(max_digits=10, decimal_places=2)
    company_name = models.CharField(max_length=128)
    currency = models.CharField(max_length=3)
    cik = models.CharField(max_length=10)
    isin = models.CharField(max_length=12)
    cusip = models.CharField(max_length=9)
    exchange = models.CharField(max_length=64)
    exchange_short_name = models.CharField(max_length=16)
    industry = models.CharField(max_length=128)
    website = models.URLField()
    description = models.TextField()
    ceo = models.CharField(max_length=128)
    sector = models.CharField(max_length=128)
    country = models.CharField(max_length=3)
    full_time_employees = models.CharField(max_length=8)
    phone = models.CharField(max_length=15)
    address = models.CharField(max_length=128)
    city = models.CharField(max_length=128)
    state = models.CharField(max_length=8)
    zip = models.CharField(max_length=16)
    dcf_diff = models.DecimalField(max_digits=15, decimal_places=5)
    dcf = models.DecimalField(max_digits=24, decimal_places=14)
    image = models.URLField()
    ipo_date = models.DateField()
    default_image = models.BooleanField()
    is_etf = models.BooleanField()
    is_actively_trading = models.BooleanField()
    is_adr = models.BooleanField()
    is_fund = models.BooleanField()
    created = models.DateField(auto_now_add=True)

    def __str__(self):
        return f'CompanyProfile({self.symbol})'
    

class IncomeStatement(models.Model):
    date = models.DateField()
    symbol = models.CharField(max_length=5)
    reported_currency = models.CharField(max_length=3)
    cik = models.CharField(max_length=10)
    filling_date = models.DateField()
    accepted_date = models.DateTimeField()
    calendar_year = models.CharField(max_length=4)
    period = models.CharField(max_length=2)
    revenue = models.BigIntegerField()
    cost_of_revenue = models.BigIntegerField()
    gross_profit = models.BigIntegerField()
    gross_profit_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    research_and_development_expenses = models.BigIntegerField()
    general_and_administrative_expenses = models.BigIntegerField()
    selling_and_marketing_expenses = models.BigIntegerField()
    selling_general_and_administrative_expenses = models.BigIntegerField()
    other_expenses = models.BigIntegerField()
    operating_expenses = models.BigIntegerField()
    cost_and_expenses = models.BigIntegerField()
    interest_income = models.BigIntegerField()
    interest_expense = models.BigIntegerField()
    depreciation_and_amortization = models.BigIntegerField()
    ebitda = models.BigIntegerField()
    ebitda_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    operating_income = models.BigIntegerField()
    operating_income_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    total_other_income_expenses_net = models.BigIntegerField()
    income_before_tax = models.BigIntegerField()
    income_before_tax_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    income_tax_expense = models.BigIntegerField()
    net_income = models.BigIntegerField()
    net_income_ratio = models.DecimalField(max_digits=11, decimal_places=10)
    eps = models.DecimalField(max_digits=5, decimal_places=2)
    eps_diluted = models.DecimalField(max_digits=5, decimal_places=2)
    weighted_average_shs_out = models.BigIntegerField()
    weighted_average_shs_out_dil = models.BigIntegerField()
    link = models.URLField()
    final_link = models.URLField()

    def __str__(self):
        return f'IncomeStatement({self.symbol}, {self.period}, {self.calendar_year})'


class BalanceSheet(models.Model):
    date=models.DateField()
    symbol=models.CharField(max_length=5)
    reported_currency=models.CharField(max_length=3)
    cik=models.CharField(max_length=10)
    filling_date=models.DateField()
    accepted_date=models.DateTimeField()
    calendar_year=models.CharField(max_length=4)
    period=models.CharField(max_length=2)
    cash_and_cash_equivalents=models.BigIntegerField()
    short_term_investments=models.BigIntegerField()
    cash_and_short_term_investments=models.BigIntegerField()
    net_receivables=models.BigIntegerField()
    inventory=models.BigIntegerField(null=True)
    other_current_assets=models.BigIntegerField()
    total_current_assets=models.BigIntegerField()
    property_plant_equipment_net=models.BigIntegerField()
    goodwill=models.BigIntegerField(null=True)
    intangible_assets=models.BigIntegerField(null=True)
    goodwill_and_intangible_assets=models.BigIntegerField(null=True)
    long_term_investments=models.BigIntegerField(null=True)
    tax_assets=models.BigIntegerField(null=True)
    other_non_current_assets=models.BigIntegerField(null=True)
    total_non_current_assets=models.BigIntegerField(null=True)
    other_assets=models.BigIntegerField(null=True)
    total_assets=models.BigIntegerField(null=True)
    account_payables=models.BigIntegerField()
    short_term_debt=models.BigIntegerField(null=True)
    tax_payables=models.BigIntegerField(null=True)
    deferred_revenue=models.BigIntegerField(null=True)
    other_current_liabilities=models.BigIntegerField(null=True)
    total_current_liabilities=models.BigIntegerField(null=True)
    long_term_debt=models.BigIntegerField(null=True)
    deferred_revenue_non_current=models.BigIntegerField(null=True)
    deferred_tax_liabilities_non_current=models.BigIntegerField(null=True)
    other_non_current_liabilities=models.BigIntegerField(null=True)
    total_non_current_liabilities=models.BigIntegerField(null=True)
    other_liabilities=models.BigIntegerField(null=True)
    capital_lease_obligations=models.BigIntegerField(null=True)
    total_liabilities=models.BigIntegerField(null=True)
    preferred_stock=models.BigIntegerField(null=True)
    common_stock=models.BigIntegerField()
    retained_earnings=models.BigIntegerField()
    accumulated_other_comprehensive_income_loss=models.BigIntegerField(null=True)
    other_total_stockholders_equity=models.BigIntegerField(null=True)
    total_stockholders_equity=models.BigIntegerField()
    total_equity = models.BigIntegerField()
    total_liabilities_and_stockholders_equity = models.BigIntegerField()
    minority_interest = models.BigIntegerField(null=True)
    total_liabilities_and_total_equity = models.BigIntegerField()
    total_investments = models.BigIntegerField()
    total_debt = models.BigIntegerField()
    net_debt = models.BigIntegerField()
    link=models.URLField(null=True)
    final_link=models.URLField(null=True)

    def __str__(self):
        return f'BalanceSheet({self.symbol}, {self.period}, {self.calendar_year})'


class CashflowStatement(models.Model):
    date = models.DateField()
    symbol = models.CharField(max_length=5)
    reported_currency = models.CharField(max_length=3)
    cik = models.CharField(max_length=10)
    filling_date = models.DateField()
    accepted_date = models.DateTimeField()
    calendar_year = models.CharField(max_length=4)
    period = models.CharField(max_length=2)
    net_income = models.BigIntegerField()
    depreciation_and_amortization = models.BigIntegerField()
    deferred_income_tax = models.BigIntegerField(null=True)
    stock_based_compensation = models.BigIntegerField(null=True)
    change_in_working_capital = models.BigIntegerField()
    accounts_receivables = models.BigIntegerField()
    inventory = models.BigIntegerField(null=True)
    accounts_payables = models.BigIntegerField()
    other_working_capital = models.BigIntegerField(null=True)
    other_non_cash_items = models.BigIntegerField(null=True)
    net_cash_provided_by_operating_activities = models.BigIntegerField()
    investments_in_property_plant_and_equipment = models.BigIntegerField(null=True)
    acquisitions_net = models.BigIntegerField(null=True)
    purchases_of_investments = models.BigIntegerField(null=True)
    sales_maturities_of_investments = models.BigIntegerField(null=True)
    other_investing_activities = models.BigIntegerField(null=True)
    net_cash_used_for_investing_activities = models.BigIntegerField()
    debt_repayment = models.BigIntegerField(null=True)
    common_stock_issued = models.BigIntegerField(null=True)
    common_stock_repurchased = models.BigIntegerField(null=True)
    dividends_paid = models.BigIntegerField(null=True)
    other_financing_activities = models.BigIntegerField(null=True)
    net_cash_used_provided_by_financing_activities = models.BigIntegerField()
    effect_of_forex_changes_on_cash = models.BigIntegerField(null=True)
    net_change_in_cash = models.BigIntegerField()
    cash_at_end_of_period = models.BigIntegerField()
    cash_at_beginning_of_period = models.BigIntegerField()
    operating_cash_flow = models.BigIntegerField()
    capital_expenditure = models.BigIntegerField(null=True)
    free_cash_flow = models.BigIntegerField()
    link = models.URLField(null=True)
    final_link = models.URLField(null=True)

    def __str__(self):
        return f'CashflowStatement({self.symbol}, {self.period}, {self.calendar_year})'
